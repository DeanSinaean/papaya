!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BLOCK_SECTORS	fs_ext.c	21;"	d	file:
BLOCK_SIZE	fs_ext.c	20;"	d	file:
BOUND	disp.c	12;"	d	file:
BTL	fs_ext.c	23;"	d	file:
BTS	fs_ext.c	22;"	d	file:
CMD_MAX_LEN	tty.c	36;"	d	file:
CMD_MAX_NUM	tty.c	/^int CMD_MAX_NUM=sizeof(cmd_arr)\/4;$/;"	v
CMP_GOON_WHEN	ku_utils.c	4;"	d	file:
DESCRIPTOR	usr/include/valType.h	/^}DESCRIPTOR;$/;"	t	typeref:struct:descriptorr
DIRBLOCKS_SIZE	fs_ext.c	35;"	d	file:
E2BIG	usr/include/errno.h	11;"	d
EACCES	usr/include/errno.h	17;"	d
EADDRINUSE	usr/include/errno.h	102;"	d
EADDRNOTAVAIL	usr/include/errno.h	103;"	d
EADV	usr/include/errno.h	72;"	d
EAFNOSUPPORT	usr/include/errno.h	101;"	d
EAGAIN	usr/include/errno.h	15;"	d
EALREADY	usr/include/errno.h	118;"	d
EBADE	usr/include/errno.h	56;"	d
EBADF	usr/include/errno.h	13;"	d
EBADFD	usr/include/errno.h	81;"	d
EBADMSG	usr/include/errno.h	78;"	d
EBADR	usr/include/errno.h	57;"	d
EBADRQC	usr/include/errno.h	60;"	d
EBADSLT	usr/include/errno.h	61;"	d
EBFONT	usr/include/errno.h	63;"	d
EBUSY	usr/include/errno.h	20;"	d
ECHILD	usr/include/errno.h	14;"	d
ECHRNG	usr/include/errno.h	48;"	d
ECOMM	usr/include/errno.h	74;"	d
ECONNABORTED	usr/include/errno.h	107;"	d
ECONNREFUSED	usr/include/errno.h	115;"	d
ECONNRESET	usr/include/errno.h	108;"	d
EDEADLK	usr/include/errno.h	39;"	d
EDEADLOCK	usr/include/errno.h	62;"	d
EDESTADDRREQ	usr/include/errno.h	93;"	d
EDI_ENTER	disp.c	8;"	d	file:
EDOM	usr/include/errno.h	37;"	d
EDOTDOT	usr/include/errno.h	77;"	d
EEXIST	usr/include/errno.h	21;"	d
EFAULT	usr/include/errno.h	18;"	d
EFBIG	usr/include/errno.h	31;"	d
EHOSTDOWN	usr/include/errno.h	116;"	d
EHOSTUNREACH	usr/include/errno.h	117;"	d
EIDRM	usr/include/errno.h	47;"	d
EILSEQ	usr/include/errno.h	88;"	d
EINPROGRESS	usr/include/errno.h	119;"	d
EINTR	usr/include/errno.h	8;"	d
EINVAL	usr/include/errno.h	26;"	d
EIO	usr/include/errno.h	9;"	d
EISCONN	usr/include/errno.h	110;"	d
EISDIR	usr/include/errno.h	25;"	d
EL2HLT	usr/include/errno.h	55;"	d
EL2NSYNC	usr/include/errno.h	49;"	d
EL3HLT	usr/include/errno.h	50;"	d
EL3RST	usr/include/errno.h	51;"	d
ELIBACC	usr/include/errno.h	83;"	d
ELIBBAD	usr/include/errno.h	84;"	d
ELIBEXEC	usr/include/errno.h	87;"	d
ELIBMAX	usr/include/errno.h	86;"	d
ELIBSCN	usr/include/errno.h	85;"	d
ELNRNG	usr/include/errno.h	52;"	d
ELOOP	usr/include/errno.h	44;"	d
EMFILE	usr/include/errno.h	28;"	d
EMLINK	usr/include/errno.h	35;"	d
EMSGSIZE	usr/include/errno.h	94;"	d
EMULTIHOP	usr/include/errno.h	76;"	d
ENAMETOOLONG	usr/include/errno.h	40;"	d
ENETDOWN	usr/include/errno.h	104;"	d
ENETRESET	usr/include/errno.h	106;"	d
ENETUNREACH	usr/include/errno.h	105;"	d
ENFILE	usr/include/errno.h	27;"	d
ENOANO	usr/include/errno.h	59;"	d
ENOBUFS	usr/include/errno.h	109;"	d
ENOCSI	usr/include/errno.h	54;"	d
ENODATA	usr/include/errno.h	65;"	d
ENODEV	usr/include/errno.h	23;"	d
ENOENT	usr/include/errno.h	6;"	d
ENOEXEC	usr/include/errno.h	12;"	d
ENOLCK	usr/include/errno.h	41;"	d
ENOLINK	usr/include/errno.h	71;"	d
ENOMEM	usr/include/errno.h	16;"	d
ENOMSG	usr/include/errno.h	46;"	d
ENONET	usr/include/errno.h	68;"	d
ENOPKG	usr/include/errno.h	69;"	d
ENOPROTOOPT	usr/include/errno.h	96;"	d
ENOSPC	usr/include/errno.h	32;"	d
ENOSR	usr/include/errno.h	67;"	d
ENOSTR	usr/include/errno.h	64;"	d
ENOSYS	usr/include/errno.h	42;"	d
ENOTBLK	usr/include/errno.h	19;"	d
ENOTCONN	usr/include/errno.h	111;"	d
ENOTDIR	usr/include/errno.h	24;"	d
ENOTEMPTY	usr/include/errno.h	43;"	d
ENOTSOCK	usr/include/errno.h	92;"	d
ENOTTY	usr/include/errno.h	29;"	d
ENOTUNIQ	usr/include/errno.h	80;"	d
ENXIO	usr/include/errno.h	10;"	d
EOPNOTSUPP	usr/include/errno.h	99;"	d
EOVERFLOW	usr/include/errno.h	79;"	d
EPERM	usr/include/errno.h	5;"	d
EPFNOSUPPORT	usr/include/errno.h	100;"	d
EPIPE	usr/include/errno.h	36;"	d
EPROTO	usr/include/errno.h	75;"	d
EPROTONOSUPPORT	usr/include/errno.h	97;"	d
EPROTOTYPE	usr/include/errno.h	95;"	d
ERANGE	usr/include/errno.h	38;"	d
EREMCHG	usr/include/errno.h	82;"	d
EREMOTE	usr/include/errno.h	70;"	d
ERESTART	usr/include/errno.h	89;"	d
EROFS	usr/include/errno.h	34;"	d
ERRNO_H	usr/include/errno.h	2;"	d
ESHUTDOWN	usr/include/errno.h	112;"	d
ESOCKTNOSUPPORT	usr/include/errno.h	98;"	d
ESPIPE	usr/include/errno.h	33;"	d
ESRCH	usr/include/errno.h	7;"	d
ESRMNT	usr/include/errno.h	73;"	d
ESTALE	usr/include/errno.h	120;"	d
ESTRPIPE	usr/include/errno.h	90;"	d
ESUCCESS	usr/include/errno.h	4;"	d
ETIME	usr/include/errno.h	66;"	d
ETIMEDOUT	usr/include/errno.h	114;"	d
ETOOMANYREFS	usr/include/errno.h	113;"	d
ETXTBSY	usr/include/errno.h	30;"	d
EUCLEAN	usr/include/errno.h	121;"	d
EUNATCH	usr/include/errno.h	53;"	d
EUNDEF	usr/include/errno.h	122;"	d
EUSERS	usr/include/errno.h	91;"	d
EWOULDBLOCK	usr/include/errno.h	45;"	d
EXDEV	usr/include/errno.h	22;"	d
EXFULL	usr/include/errno.h	58;"	d
Elf32_Addr	usr/include/valType.h	/^typedef unsigned Elf32_Addr;$/;"	t
Elf32_Half	usr/include/valType.h	/^typedef unsigned short Elf32_Half;$/;"	t
Elf32_Off	usr/include/valType.h	/^typedef unsigned Elf32_Off;$/;"	t
Elf32_Word	usr/include/valType.h	/^typedef unsigned Elf32_Word;$/;"	t
FSBUF_SIZE	fs_ext.c	36;"	d	file:
FSBUF_SIZE	fs_xx.c	14;"	d	file:
GDT_SECTORS	fs_ext.c	28;"	d	file:
GDT_SIZE	fs_ext.c	27;"	d	file:
GROUP_NUM	fs_ext.c	29;"	d	file:
Gate	kernel.asm	/^Gate selector_plain_c0, i2fh -_start + base_text, 0, DA_386IGate$/;"	l
Gate	kernel.asm	/^Gate selector_plain_c0, i80 - _start + base_text, 0, DA_386IGate$/;"	l
Gate	kernel.asm	/^Gate selector_plain_c0, i80 -_start + base_text, 0, DA_386IGate$/;"	l
INODE_PER_SECTOR	fs_ext.c	33;"	d	file:
INODE_SIZE	fs_ext.c	32;"	d	file:
KERNEL_CACHE_BASE	debug.c	4;"	d	file:
LOOP	disp.c	21;"	d	file:
MAX_CMD	fs.c	14;"	d	file:
MAX_MOUNT_INFO	fs.c	21;"	d	file:
MK_BDF	tty.c	174;"	d	file:
MK_PCIADDR	tty.c	175;"	d	file:
NULL	usr/include/valType.h	20;"	d
OUTPUT_DELAY	struinfo.c	8;"	d	file:
PAGE_SIZE	disp.c	10;"	d	file:
PCI_BUS_MAX	tty.c	176;"	d	file:
PCI_CONFIG_ADDR	tty.c	179;"	d	file:
PCI_CONFIG_DATA	tty.c	180;"	d	file:
PCI_DEV_MAX	tty.c	177;"	d	file:
PCI_FUNC_MAX	tty.c	178;"	d	file:
ROOT_INODE	fs_ext.c	25;"	d	file:
SIZE_LOAD_BUF	tty.c	34;"	d	file:
SYS_CALL_H	usr/include/sys_call.h	2;"	d
TSS1	kernel.asm	/^TSS1 selector_plain_d0,ring0_smallstack_bottom, 0, 0, 0, 0$/;"	l
UNISTD_H	usr/include/unistd.h	2;"	d
UTILS_H	usr/include/utils.h	2;"	d
VALTYPE_H	usr/include/valType.h	3;"	d
VALUE	struinfo.c	6;"	d	file:
VPATH	makefile	/^VPATH=..\/lib\/ ..\/bin\/$/;"	m
__le16	usr/include/valType.h	/^typedef unsigned short __le16;$/;"	t
__le32	usr/include/valType.h	/^typedef unsigned __le32;$/;"	t
__u16	usr/include/valType.h	/^typedef unsigned short __u16;$/;"	t
__u32	usr/include/valType.h	/^typedef unsigned __u32;$/;"	t
__u8	usr/include/valType.h	/^typedef unsigned char __u8;$/;"	t
_k_show_chars	func_table.c	/^void _k_show_chars(char*pt_head,unsigned end_flag){$/;"	f
_k_show_var	func_table.c	/^void _k_show_var(unsigned var,unsigned var_type){$/;"	f
_reallystart	kernel.asm	/^_reallystart:$/;"	l
_start	kernel.asm	/^_start:$/;"	l
_start	usr/src/hw.c	/^void _start(void){$/;"	f
add	kernel.asm	/^add esp,4$/;"	l
add	proc.asm	/^add esp,4$/;"	l
add	usr/src/asmtask.asm	/^add esp,4$/;"	l
adjust	fs_ext.c	/^static void adjust(void){$/;"	f	file:
alloc_page	mm.c	/^int alloc_page(){$/;"	f
arg0	tty.c	/^static char arg0[16];$/;"	v	file:
asciis_buffer	disp.c	/^static char asciis_buffer[buffer_len];$/;"	v	file:
askfs	fs.c	/^int askfs(int command,$/;"	f
askhs	hs.c	/^void askhs(int command,int lba,int count,char*buf){$/;"	f
asm	usr/src/makefile	/^asm=nasm$/;"	m
asmflags	makefile	/^asmflags=-i..\/include\/ -i.\/usr\/include\/$/;"	m
asmflags	usr/src/makefile	/^asmflags=-I..\/include\/$/;"	m
asmo	makefile	/^asmo=kernel.asmo proc.asmo utils.asmo$/;"	m
assert_func	utils.c	/^void assert_func(char*exp,char*file,char*base_file,int line){$/;"	f
attr1	usr/include/valType.h	/^	u8 attr1;$/;"	m	struct:descriptorr
base_01	usr/include/valType.h	/^	u16 base_01;$/;"	m	struct:descriptorr
base_2	usr/include/valType.h	/^	u8 base_2;$/;"	m	struct:descriptorr
base_3	usr/include/valType.h	/^	u8 base_3;$/;"	m	struct:descriptorr
base_entrance_kernel	boot.asm	/^base_entrance_kernel equ 0x30400$/;"	d
base_kernelStack	kernel.asm	/^base_kernelStack equ 0fffeh ; kernel-stack range from  0fffeh to 7f00h,about 32kb$/;"	d
base_kernel_loaded	boot.asm	/^base_kernel_loaded equ  0x8000$/;"	d
base_text	kernel.asm	/^base_text equ 0x30400$/;"	d
base_tss	kernel.asm	/^base_tss  equ base_text + (tss -_start)$/;"	d
bit1_count	utils.c	/^int bit1_count(char*addr,int bytes){$/;"	f
block0	utils.c	/^static EMPTY_BLOCK*block0=(EMPTY_BLOCK*)HEAP_BASE;$/;"	v	file:
boolean	usr/include/valType.h	/^typedef int boolean;$/;"	t
bounds_check	kernel.asm	/^bounds_check:$/;"	l
breakPoint	kernel.asm	/^breakPoint:$/;"	l
buff	tty.c	/^char*buff;$/;"	v
buffer_len	disp.c	7;"	d	file:
call	kernel.asm	/^call init8253 ; init 8253$/;"	l
call	kernel.asm	/^call init8259A ; init 8259A$/;"	l
cat	tty.c	/^static void cat(char*path){$/;"	f	file:
cc	usr/src/makefile	/^cc=gcc$/;"	m
ceil_divide	ku_utils.c	/^int ceil_divide(int a,int b){$/;"	f
cflags	makefile	/^cflags=$(cheader_path) -Wall -std=c99 -fno-builtin -g -Wno-unused-variable -Wno-unused-function$/;"	m
cflags	usr/src/makefile	/^cflags=-I..\/include\/ -Wall -fno-builtin -std=c99 -m32$/;"	m
chars_to_str	ku_utils.c	/^void chars_to_str(char*str,char*chars){\/\/endflag=\\0,space$/;"	f
charscmp	ku_utils.c	/^int charscmp(char*pt1,char*pt2,int end_flag){$/;"	f
cheader_path	makefile	/^cheader_path=-I..\/include\/ -I.\/usr\/include\/$/;"	m
check_dirent	mm.c	/^static void check_dirent(u32*dir,int entry_id){$/;"	f	file:
cli	boot.asm	/^cli$/;"	l
cli	kernel.asm	/^cli$/;"	l
cmd	fs_ext.c	44;"	d	file:
cmd	fs_xx.c	17;"	d	file:
cmd	hs.c	/^static HS_CMD cmd;$/;"	v	file:
cmd_arr	tty.c	/^static char*cmd_arr[]={$/;"	v	file:
cmd_asciis	tty.c	/^static char cmd_asciis[CMD_MAX_LEN];$/;"	v	file:
cmd_asciis_nextword	tty.c	/^static int cmd_asciis_nextword(void){\/\/aim:adjust pt_cmd$/;"	f	file:
cmd_info	hs.c	/^void cmd_info(void){$/;"	f
cmd_len	tty.c	/^static int cmd_len=0;$/;"	v	file:
co	makefile	/^co= kernel.o   utils.o proc.o kbd_drv.o  func_table.o disp.o video_drv.o\\$/;"	m
copr_error	kernel.asm	/^copr_error:$/;"	l
copr_not_avialable	kernel.asm	/^copr_not_avialable:$/;"	l
copr_seg_overrun	kernel.asm	/^copr_seg_overrun:$/;"	l
count_dispatch	proc.c	/^static int count_dispatch=0;$/;"	v	file:
cpu_string	kernel.c	/^char cpu_string[16];$/;"	v
create_kernel_process	proc.c	/^void create_kernel_process(u32 addr,int prio,int time_slice,char*p_name,int ring){$/;"	f
create_usr_process	proc.c	/^void create_usr_process(char*exec_file,int prio,int time_slice,char*p_name,int father_pid){$/;"	f
ctrl_down	kbd_drv.c	/^static int ctrl_down=0;$/;"	v	file:
curr_dp_lba	fs_ext.c	/^static int curr_dp_lba=0; $/;"	v	file:
currfd	fs_ext.c	45;"	d	file:
currfd	fs_xx.c	18;"	d	file:
cySegment	boot.asm	/^cySegment:$/;"	l
dap	boot.asm	/^dap:$/;"	l
db	boot.asm	/^db 0xaa, 0xbb,  0xcc,   0xff$/;"	l
debug_watch	debug.c	/^void debug_watch(u32 addr,int write_only){$/;"	f
del_node	utils.c	/^void del_node(EMPTY_BLOCK*block){$/;"	f
descriptorr	usr/include/valType.h	/^typedef struct descriptorr{$/;"	s
detect_pci	tty.c	/^static void detect_pci(void){$/;"	f	file:
dirblocks	fs_ext.c	/^static char*dirblocks;		\/**temp buffer a dir-type file*\/$/;"	v	file:
disk	tty.c	/^static void disk(void){$/;"	f	file:
divide_error	kernel.asm	/^divide_error:$/;"	l
doNothing	boot.asm	/^doNothing:$/;"	l
double_fault	kernel.asm	/^double_fault:$/;"	l
dump_sys	utils.c	/^void dump_sys(){$/;"	f
dw	boot.asm	/^dw 0xaa55$/;"	l
eflags	proc.c	/^int eflags=0x1200;\/\/IOPL=1,STI$/;"	v
empty_cmds	fs.c	/^static FS_COMMAND empty_cmds[MAX_CMD];\/\/use to store unfinished fs req $/;"	v	file:
entrance	boot.asm	/^entrance:$/;"	l
errno	usr/include/errno.h	3;"	d
exception_handler	kernel.asm	/^exception_handler:$/;"	l
exception_handler_step1	kernel.asm	/^exception_handler_step1:$/;"	l
extern	kernel.asm	/^extern _k_show_chars,k_sleep,k_obuffer_shift,_k_show_var,k_open,k_read,k_write,k_close,k_watch,k_seek$/;"	l
extern	kernel.asm	/^extern cCallDispStr$/;"	l
extern	kernel.asm	/^extern dump_sys$/;"	l
extern	kernel.asm	/^extern getchar$/;"	l
extern	kernel.asm	/^extern init8253$/;"	l
extern	kernel.asm	/^extern init8259A$/;"	l
extern	kernel.asm	/^extern kernel_c$/;"	l
extern	kernel.asm	/^extern key_handler$/;"	l
extern	kernel.asm	/^extern no_reenter$/;"	l
extern	kernel.asm	/^extern proc_dispatch$/;"	l
extern	kernel.asm	/^extern wake_hs,pgerr$/;"	l
extern	proc.asm	/^extern selector_plain_c3$/;"	l
extern	proc.asm	/^extern selector_plain_d3$/;"	l
extern	proc.asm	/^extern size_stackframe$/;"	l
extern	proc.asm	/^extern tss$/;"	l
extern	utils.asm	/^extern cpu_string$/;"	l
false	usr/include/valType.h	6;"	d
fd_table	fs.c	/^FILE_DESC fd_table[MAX_FD];$/;"	v
fire	proc.c	/^void fire(int pid){$/;"	f
fire_asm	proc.asm	/^fire_asm:$/;"	l
front_pid	tty.c	/^static int front_pid;$/;"	v	file:
fs_ext	fs_ext.c	/^void fs_ext(void){$/;"	f
fs_xx	fs_xx.c	/^void fs_xx(void){$/;"	f
fsbuf	fs_ext.c	/^static char*fsbuf;			\/**common buffer for ext*\/$/;"	v	file:
func_arr	tty.c	/^static void (*func_arr[])()={$/;"	v	file:
func_table	kernel.asm	/^func_table:$/;"	l
g_dp	fs.c	/^DP g_dp[MAX_DEVICE][MAX_PARTATION];$/;"	v
gdt	boot.asm	/^gdt:            Descriptor 0,   0,          0                         ; null descriptor$/;"	l
gdt	fs_ext.c	/^static GROUP_DESC*gdt;		\/**buffer group-desc table*\/$/;"	v	file:
gdt	kernel.asm	/^gdt:$/;"	l
gdtPtr	boot.asm	/^gdtPtr:$/;"	l
gdtPtr	kernel.asm	/^gdtPtr:$/;"	l
general_protection	kernel.asm	/^general_protection:$/;"	l
getDirentByName	fs_ext.c	/^DIRENT* getDirentByName(char*name,int inode_d){\/\/不能接受空字符串$/;"	f
getEmpty	proc.c	/^int getEmpty(void){$/;"	f
getInode	fs_ext.c	/^static INODE*getInode(int inode_id){$/;"	f	file:
getInodeByName	fs_ext.c	/^int getInodeByName(char*name,int inode_d){\/\/不能接受空字符串$/;"	f
getInodeByPath	fs_ext.c	/^int getInodeByPath(char*path){$/;"	f
get_offset	struinfo.c	/^int get_offset(int m_id){$/;"	f
get_ppg	mm.c	/^int get_ppg(u32*dir,int vpg_id){$/;"	f
get_start	video_drv.c	/^int get_start(void){$/;"	f
getchar	tty.c	/^int getchar(void){$/;"	f
getpid	usr/src/unistd.c	/^int getpid(void){$/;"	f
global	kernel.asm	/^global _start$/;"	l
global	kernel.asm	/^global i20h$/;"	l
global	kernel.asm	/^global outofproc$/;"	l
global	kernel.asm	/^global p3$/;"	l
global	kernel.asm	/^global sec_data$/;"	l
global	kernel.asm	/^global selector_plain_c3,selector_plain_d3,selector_plain_c1,selector_plain_d1,selector_plain_c0,selector_plain_d0;$/;"	l
global	kernel.asm	/^global selector_room_plain$/;"	l
global	kernel.asm	/^global selector_video$/;"	l
global	kernel.asm	/^global ticks$/;"	l
global	kernel.asm	/^global tss$/;"	l
global	proc.asm	/^global fire_asm$/;"	l
global	usr/src/asmtask.asm	/^global idle,p1,p2$/;"	l
global	usr/src/asmtask.asm	/^global p0_addr$/;"	l
global	usr/src/sys_call.asm	/^global dotchar,sleep,u_obuffer_shift,show_chars,show_var,open,read,write,close,watch,lseek$/;"	l
global	utils.asm	/^global in_byte,out_byte,port_read,send_hd_eoi,port_write,bt,bs,bc,br,bt0,detect_cpu,in_dw,out_dw$/;"	l
global	utils.asm	/^global init8253$/;"	l
global	utils.asm	/^global init8259A$/;"	l
global_equal_map	mm.c	/^void global_equal_map(void){$/;"	f
heap_init	utils.c	/^void heap_init(void){$/;"	f
hex_int	ku_utils.c	/^int hex_int(char x){$/;"	f
hlt	usr/src/asmtask.asm	/^hlt$/;"	l
hs	hs.c	/^void hs(void){$/;"	f
hs_cmd_init	hs.c	/^void hs_cmd_init(u32 lba,u32 count,u8 command,char*buf){\/\/这个函数对外开放，所以直接操作cmd，不用参数指定cmd，因为外界访问不到hs的cmd。$/;"	f
hs_cmd_out	hs.c	/^void hs_cmd_out(HS_CMD*cmd){$/;"	f
human_memsize	ku_utils.c	/^int*human_memsize(int size,int initial_scale_count){$/;"	f
human_memsize_into	ku_utils.c	/^void human_memsize_into(int*gmkb,int size,int initial_scale_count){$/;"	f
i20h	kernel.asm	/^i20h:$/;"	l
i21h	kernel.asm	/^i21h:$/;"	l
i2fh	kernel.asm	/^i2fh:$/;"	l
i30h	kernel.asm	/^i30h:$/;"	l
i80	kernel.asm	/^i80:$/;"	l
id	struinfo.c	/^int id=0;$/;"	v
identify_info	hs.c	/^void identify_info(void){$/;"	f
idle	usr/src/asmtask.asm	/^idle:$/;"	l
idt	kernel.asm	/^idt:$/;"	l
idtPtr	kernel.asm	/^idtPtr:$/;"	l
in_byte	utils.asm	/^in_byte: ;char in_byte(int port)$/;"	l
in_dw	utils.asm	/^in_dw: ;u32 in_dw(int port)$/;"	l
inc	usr/src/asmtask.asm	/^inc byte [p0_addr]$/;"	l
inc	usr/src/asmtask.asm	/^inc byte[p0_addr+2*2]$/;"	l
inc	usr/src/asmtask.asm	/^inc eax$/;"	l
info_heap	utils.c	/^void info_heap(void){$/;"	f
info_pcb_table_info	tty.c	/^static void info_pcb_table_info(void){$/;"	f	file:
init	fs_ext.c	/^void init(void){$/;"	f
init	fs_xx.c	/^void init(void){$/;"	f
init	mm.c	/^static void init(void){$/;"	f	file:
init8253	utils.asm	/^init8253:$/;"	l
init8259A	utils.asm	/^init8259A:$/;"	l
init_asciis_buffer	disp.c	/^void init_asciis_buffer(void){$/;"	f
init_debug	debug.c	/^void init_debug(void){$/;"	f
init_fs	fs.c	/^void init_fs(void){$/;"	f
init_g_dp	fs_ext.c	/^static void init_g_dp(void){$/;"	f	file:
init_g_dp_extend	fs_ext.c	/^static void init_g_dp_extend(u32 ept_lba,u32 extend_start){$/;"	f	file:
inodesector	fs_ext.c	/^static INODE*inodesector;	\/**temp buffer some inodes*\/$/;"	v	file:
insert_after	utils.c	/^void insert_after(EMPTY_BLOCK*mother,EMPTY_BLOCK*block){$/;"	f
inval_opcode	kernel.asm	/^inval_opcode:$/;"	l
inval_tss	kernel.asm	/^inval_tss:$/;"	l
iretd	proc.asm	/^iretd$/;"	l
is_fd_valid	fs.c	/^boolean is_fd_valid(int fd, int command)$/;"	f
is_partition_valid	fs.c	/^boolean is_partition_valid(short device , short partition)$/;"	f
is_there_cmd_wait	fs.c	/^FS_COMMAND*is_there_cmd_wait(void){$/;"	f
jmp	boot.asm	/^jmp dword selector_plain_c0:base_entrance_kernel$/;"	l
jmp	kernel.asm	/^jmp _reallystart$/;"	l
jmp	kernel.asm	/^jmp kernel_c;$/;"	l
jmp	kernel.asm	/^jmp selector_plain_c0:newcs ;update cs$/;"	l
jmp	usr/src/asmtask.asm	/^jmp idle$/;"	l
jmp	usr/src/asmtask.asm	/^jmp p1$/;"	l
jmp	usr/src/asmtask.asm	/^jmp p2$/;"	l
k_checkbound	disp.c	/^void k_checkbound(void){$/;"	f
k_close	func_table.c	/^void k_close(fd){$/;"	f
k_eheader	debug.c	5;"	d	file:
k_obuffer_shift	func_table.c	/^int k_obuffer_shift(void){$/;"	f
k_open	func_table.c	/^void k_open(char*path,int mod){$/;"	f
k_read	func_table.c	/^void k_read(int fd,char*buf,int size){$/;"	f
k_screen_reset	disp.c	/^void k_screen_reset(void){$/;"	f
k_scroll	disp.c	/^void k_scroll(void){$/;"	f
k_seek	func_table.c	/^void k_seek(int fd,int offset,int whence){$/;"	f
k_sheader	debug.c	/^static Elf32_Shdr* k_sheader;$/;"	v	file:
k_show_chars	disp.c	/^void k_show_chars(char*pt_head,u32 end_flag){$/;"	f
k_show_var	disp.c	/^void k_show_var(unsigned x,int val_type){$/;"	f
k_sleep	func_table.c	/^void k_sleep(int msg_type,int msg_bind){$/;"	f
k_watch	func_table.c	/^void k_watch(u32 addr,int write_only){$/;"	f
k_write	func_table.c	/^void k_write(void){$/;"	f
kernel_c	kernel.c	/^void kernel_c(){$/;"	f
kernel_esp	kernel.asm	/^kernel_esp:$/;"	l
kernelrelyo	makefile	/^kernelrelyo=$(asmo) $(usro)  $(co)$/;"	m
kernelsection	debug.c	/^void kernelsection(void){$/;"	f
kernelsectionn	tty.c	/^static void kernelsectionn(void){$/;"	f	file:
key_handler	kbd_drv.c	/^void  key_handler(void){$/;"	f
keymap	kbd_drv.c	/^unsigned char keymap[NR_SCAN_CODES * MAP_COLS]   = {$/;"	v
kfree	utils.c	/^void kfree(void*pt){$/;"	f
kfreee	tty.c	/^static void kfreee(void){$/;"	f	file:
kill	proc.c	/^void kill(int pid){$/;"	f
kmalloc	utils.c	/^void*kmalloc(int byte){$/;"	f
kmallocc	tty.c	/^static void kmallocc(void){$/;"	f	file:
ldpath	makefile	/^ldpath=-L..\/lib\/$/;"	m
lea	proc.asm	/^lea eax,[esp+ebx]$/;"	l
len_bounds_check	kernel.asm	/^len_bounds_check equ $ - bounds_check$/;"	d
len_breakPoint	kernel.asm	/^len_breakPoint equ $ - breakPoint$/;"	d
len_copr_error	kernel.asm	/^len_copr_error equ $ - copr_error$/;"	d
len_copr_not_avialable	kernel.asm	/^len_copr_not_avialable equ $ - copr_not_avialable$/;"	d
len_copr_seg_overrun	kernel.asm	/^len_copr_seg_overrun equ $ - copr_seg_overrun$/;"	d
len_divide_error	kernel.asm	/^len_divide_error equ $ - divide_error$/;"	d
len_double_fault	kernel.asm	/^len_double_fault equ $ - double_fault$/;"	d
len_gdt	boot.asm	/^len_gdt             equ     $ - gdt                     ; gdt length$/;"	d
len_gdt	kernel.asm	/^len_gdt equ $ - gdt$/;"	d
len_general_protection	kernel.asm	/^len_general_protection equ $ - general_protection$/;"	d
len_idt	kernel.asm	/^len_idt equ $ - idt$/;"	d
len_inval_opcode	kernel.asm	/^len_inval_opcode equ $ - inval_opcode$/;"	d
len_inval_tss	kernel.asm	/^len_inval_tss equ $ - inval_tss$/;"	d
len_nmi	kernel.asm	/^len_nmi equ $ - nmi$/;"	d
len_overflow	kernel.asm	/^len_overflow equ $ - overflow$/;"	d
len_page_fault	kernel.asm	/^len_page_fault equ  $ - page_fault$/;"	d
len_segment_not_present	kernel.asm	/^len_segment_not_present equ $ - segment_not_present$/;"	d
len_single_step	kernel.asm	/^len_single_step equ $ - single_step$/;"	d
len_stack_error	kernel.asm	/^len_stack_error equ $ - stack_error$/;"	d
len_tss	kernel.asm	/^len_tss equ $ - tss$/;"	d
lens	struinfo.c	/^int*lens=0;$/;"	v
lgdt	boot.asm	/^lgdt [gdtPtr]$/;"	l
lgdt	kernel.asm	/^lgdt [gdtPtr]   ; switch gdt,selector for ds prepared during boot.bin$/;"	l
libdir	usr/src/makefile	/^libdir:= ..\/lib$/;"	m
lidt	kernel.asm	/^lidt [idtPtr]$/;"	l
limit_01	usr/include/valType.h	/^	u16 limit_01;$/;"	m	struct:descriptorr
limit_attr	usr/include/valType.h	/^	u8 limit_attr;$/;"	m	struct:descriptorr
loadbuf	proc.c	/^static char*loadbuf;$/;"	v	file:
loadbuf	tty.c	/^static char*loadbuf;$/;"	v	file:
loader	tty.c	/^static void loader(char*path){$/;"	f	file:
loadfile	usr/src/utils.c	/^boolean loadfile(char*path,char*addr){$/;"	f
loadpart	fs_ext.c	/^static int loadpart(int inode_id,char* _load_addr,int seek,int size){$/;"	f	file:
loop	boot.asm	/^loop search_ph_typeLoaded$/;"	l
ls	tty.c	/^static void ls(char*path){$/;"	f	file:
ltr	kernel.asm	/^ltr ax$/;"	l
map_pg	mm.c	/^void map_pg(u32*dir,int vpg_id,int ppg_id,int us,int rw){$/;"	f
mbrHead	boot.asm	/^mbrHead:$/;"	l
memcp	ku_utils.c	/^void memcp(char*dest,char*src,int byte){$/;"	f
memcpy	utils.c	/^void memcpy(char*dest,char*src,int bytes){$/;"	f
memset	ku_utils.c	/^void memset(char*dest,int byte,int value){$/;"	f
memsetw	ku_utils.c	/^void memsetw(u16*dest,int word,u16 value){$/;"	f
mm	mm.c	/^void mm(void){$/;"	f
mount	fs.c	/^boolean mount(char*mountpoint,short device,short partition){$/;"	f
mountinfo	fs.c	/^static MOUNT_INFO mountinfo[MAX_MOUNT_INFO];$/;"	v	file:
mov	boot.asm	/^mov ax, base_kernel_loaded$/;"	l
mov	boot.asm	/^mov ax, selector_plain_d0$/;"	l
mov	boot.asm	/^mov ax,0$/;"	l
mov	boot.asm	/^mov bx, 0$/;"	l
mov	boot.asm	/^mov bx, [bx+28] ; ERR e_phoff should be 32-bit,here ignore high-16 bit$/;"	l
mov	boot.asm	/^mov cx, [bx+44] ; e_phnum$/;"	l
mov	boot.asm	/^mov ds, ax$/;"	l
mov	boot.asm	/^mov ds,ax$/;"	l
mov	boot.asm	/^mov dx, [bx+42] ; e_phentsz$/;"	l
mov	kernel.asm	/^mov  ax, selector_plain_d0$/;"	l
mov	kernel.asm	/^mov  ax, selector_video$/;"	l
mov	kernel.asm	/^mov  ds, ax$/;"	l
mov	kernel.asm	/^mov  es, ax$/;"	l
mov	kernel.asm	/^mov  fs, ax$/;"	l
mov	kernel.asm	/^mov  gs, ax$/;"	l
mov	kernel.asm	/^mov  ss, ax$/;"	l
mov	kernel.asm	/^mov [kernel_esp],esp$/;"	l
mov	kernel.asm	/^mov ax,selector_tss$/;"	l
mov	kernel.asm	/^mov esp, base_kernelStack   ; the stack start at 7f00h ERR be care for stack will boiled$/;"	l
mov	proc.asm	/^mov al,20h$/;"	l
mov	proc.asm	/^mov dword [tss+tss_esp0_offset],eax;register pcb.stackframe.bottom in tss.esp0$/;"	l
mov	proc.asm	/^mov ebx,[size_stackframe]  $/;"	l
mov	proc.asm	/^mov esp,[esp+4];point esp to addr_pcb,and reset kernel stack$/;"	l
names	struinfo.c	/^char**names=0;$/;"	v
new_cmd	fs.c	/^FS_COMMAND* new_cmd(void){$/;"	f
new_fd	fs.c	/^int new_fd(void){$/;"	f
nmi	kernel.asm	/^nmi:$/;"	l
num_members	struinfo.c	/^int num_members=0;$/;"	v
obuffer_init	proc.c	/^void obuffer_init(OBUFFER* pt_obuffer){$/;"	f
obuffer_push	proc.c	/^void obuffer_push(OBUFFER* pt_obuffer,char c){$/;"	f
obuffer_shift	proc.c	/^unsigned char obuffer_shift(OBUFFER* pt_obuffer){$/;"	f
old_ticks	proc.c	/^static u32 old_ticks=0;$/;"	v	file:
openA20	boot.asm	/^openA20:$/;"	l
oprintf	disp.c	/^void oprintf(char*format,...){$/;"	f
org	boot.asm	/^org 0x7c00$/;"	l
out	proc.asm	/^out 20h,al$/;"	l
out_dw	utils.asm	/^out_dw: ;void out_dw(int port,u32 value)$/;"	l
outofproc	kernel.asm	/^outofproc:$/;"	l
overflow	kernel.asm	/^overflow:$/;"	l
p0_addr	usr/src/asmtask.asm	/^p0_addr equ 0xb8000$/;"	d
p1	usr/src/asmtask.asm	/^p1:$/;"	l
p2	usr/src/asmtask.asm	/^p2:$/;"	l
page_fault	kernel.asm	/^page_fault:$/;"	l
parse_cmd_asciis	tty.c	/^void parse_cmd_asciis(){\/\/一个粗略的命令解析函数$/;"	f
pgbmp	mm.c	/^static u8 *pgbmp;$/;"	v	file:
pgerr	mm.c	/^void pgerr(void){$/;"	f
pickNext	proc.c	/^int pickNext(void){\/\/return  min_prio active process's pid$/;"	f
pop	proc.asm	/^pop ds$/;"	d
pop	proc.asm	/^pop es$/;"	l
pop	proc.asm	/^pop fs$/;"	l
pop	proc.asm	/^pop gs$/;"	l
popad	proc.asm	/^popad$/;"	l
pow_int	ku_utils.c	/^int pow_int(int base,int exp){$/;"	f
printf	struinfo.c	7;"	d	file:
printff	usr/src/utils.c	/^void printff(char*format,...){$/;"	f
proc_dispatch	proc.c	/^void proc_dispatch(void){$/;"	f
proc_get_ppg	mm.c	/^int proc_get_ppg(int pid,int vpg_id){$/;"	f
proc_init	proc.c	/^void proc_init(void){$/;"	f
proc_init_pcb	proc.c	/^static void proc_init_pcb(int pid_empty,u32 addr,int prio,int time_slice,char*p_name,int ring){$/;"	f	file:
proc_init_vspace	proc.c	/^static int proc_init_vspace(int pid,char*exec_file){$/;"	f	file:
proc_load_seg	proc.c	/^static void proc_load_seg(int pid,Elf32_Phdr*ph){$/;"	f	file:
proc_map_kpg	mm.c	/^void proc_map_kpg(int pid){		\/**ERR 暂时的kernel page都是用户可读写的*\/$/;"	f
proc_map_pg	mm.c	/^void proc_map_pg(int pid,int vpg_id,int ppg_id,int us,int rw){$/;"	f
proc_map_stackpg	mm.c	/^void proc_map_stackpg(int pid){$/;"	f
ps	tty.c	/^static void ps(void){$/;"	f	file:
pt_cmd	fs_ext.c	/^static  FS_COMMAND*pt_cmd;$/;"	v	file:
pt_cmd	fs_xx.c	/^static  FS_COMMAND*pt_cmd;$/;"	v	file:
pt_cmd	tty.c	/^static char* pt_cmd=0;$/;"	v	file:
pt_video	disp.c	/^static char* pt_video=(char*)0xb8000;$/;"	v	file:
push	kernel.asm	/^	push ds$/;"	d
push	kernel.asm	/^push  11931 ;1193180\/100$/;"	l
push	kernel.asm	/^push 11111000b$/;"	l
push	usr/src/asmtask.asm	/^push 100$/;"	l
read_cmos	tty.c	/^static int read_cmos(int addr){$/;"	f	file:
read_error	boot.asm	/^read_error:$/;"	l
read_member	struinfo.c	/^unsigned read_member(int m_id){$/;"	f
read_ok	boot.asm	/^read_ok:$/;"	l
releasefd	fs.c	/^void releasefd(int fd){$/;"	f
resetKernel	boot.asm	/^resetKernel:$/;"	l
reset_cmd_asciis	tty.c	/^void reset_cmd_asciis(){$/;"	f
ring0_smallstack_bottom	kernel.asm	/^ring0_smallstack_bottom:$/;"	l
ring0_smallstack_iretd	kernel.asm	/^ring0_smallstack_iretd:$/;"	l
ring0_smallstack_top	kernel.asm	/^ring0_smallstack_top:$/;"	l
s	hs.c	/^static char s[64];$/;"	v	file:
sb	fs_ext.c	/^static SUPER_BLOCK sb;		\/**buffer superblock*\/$/;"	v	file:
search_ph_typeLoaded	boot.asm	/^search_ph_typeLoaded:$/;"	l
sec_data	kernel.asm	/^sec_data:$/;"	l
segment_not_present	kernel.asm	/^segment_not_present:$/;"	l
selector_pgDir	kernel.asm	/^selector_pgDir      equ gdt.desc_pgDir - gdt$/;"	d
selector_pgTbl	kernel.asm	/^selector_pgTbl      equ gdt.desc_pgTbl - gdt$/;"	d
selector_plain_c	proc.c	/^static int selector_plain_c[4]={(int)&selector_plain_c0,(int)&selector_plain_c1,0,(int)&selector_plain_c3};$/;"	v	file:
selector_plain_c0	boot.asm	/^selector_plain_c0   equ     gdt.desc_plain_c0 - gdt $/;"	d
selector_plain_c0	kernel.asm	/^selector_plain_c0 equ gdt.desc_plain_c0 - gdt$/;"	d
selector_plain_c1	kernel.asm	/^selector_plain_c1 equ gdt.desc_plain_c1 - gdt + SA_RPL1$/;"	d
selector_plain_c3	kernel.asm	/^selector_plain_c3 equ gdt.desc_plain_c3 - gdt + SA_RPL3$/;"	d
selector_plain_d	proc.c	/^static int selector_plain_d[4]={(int)&selector_plain_d0,(int)&selector_plain_d1,0,(int)&selector_plain_d3};$/;"	v	file:
selector_plain_d0	boot.asm	/^selector_plain_d0   equ     gdt.desc_plain_d0 - gdt$/;"	d
selector_plain_d0	kernel.asm	/^selector_plain_d0 equ gdt.desc_plain_d0 - gdt$/;"	d
selector_plain_d1	kernel.asm	/^selector_plain_d1 equ gdt.desc_plain_d1 - gdt + SA_RPL1$/;"	d
selector_plain_d3	kernel.asm	/^selector_plain_d3 equ gdt.desc_plain_d3 - gdt + SA_RPL3$/;"	d
selector_room_plain	kernel.asm	/^selector_room_plain equ gdt.desc_room_plain - gdt$/;"	d
selector_tss	kernel.asm	/^selector_tss        equ gdt.desc_tss - gdt$/;"	d
selector_video	kernel.asm	/^selector_video      equ gdt.desc_video - gdt$/;"	d
send_hd_eoi	utils.asm	/^send_hd_eoi:$/;"	l
set_cursor	video_drv.c	/^void set_cursor(unsigned pos){$/;"	f
set_pgbmp	mm.c	/^static void set_pgbmp(int start_page,int pages){$/;"	f	file:
set_start	video_drv.c	/^void set_start(u32 pos){$/;"	f
shift_down	kbd_drv.c	/^static int shift_down=0;$/;"	v	file:
show_asciis_buffer	disp.c	/^void show_asciis_buffer(void){$/;"	f
show_bigmember	struinfo.c	/^void show_bigmember(int m_id){$/;"	f
show_dir	tty.c	/^void show_dir(char*buf){\/\/dir block was pre-loaded to buf $/;"	f
shstrtab	debug.c	/^static char*shstrtab;$/;"	v	file:
single_step	kernel.asm	/^single_step:$/;"	l
size_stackframe	proc.c	/^int size_stackframe=sizeof(STACK_FRAME);$/;"	v
stab	debug.c	/^static NLIST*stab;$/;"	v	file:
stabidx	debug.c	/^static int stabidx;$/;"	v	file:
stabstr	debug.c	/^static char*stabstr;$/;"	v	file:
stack_error	kernel.asm	/^stack_error:$/;"	l
start_line	disp.c	/^static int start_line=0;$/;"	v	file:
std	makefile	/^	gcc -o  ..\/cmd\/dimg ..\/cmd\/dimg.c -std=c99$/;"	m
strcmp	ku_utils.c	/^int strcmp(char*pt1,char*pt2){$/;"	f
strcpy	utils.c	/^char*strcpy(char*dest,char*src){$/;"	f
strlen	utils.c	/^int strlen(char*str){$/;"	f
strmatch	utils.c	/^boolean strmatch(char*seg,char*whole){$/;"	f
stru	struinfo.c	/^char*stru=0;$/;"	v
struinfo	struinfo.c	/^void struinfo(void){$/;"	f
switch_proMode	boot.asm	/^switch_proMode:$/;"	l
sys_string	fs.c	/^char* sys_string[256];$/;"	v
syscall_ret	proc.c	/^void syscall_ret(int return_val,int return_errno){$/;"	f
syscall_ret_to	proc.c	/^void syscall_ret_to(int pid,int return_val,int return_errno){$/;"	f
syscall_soft_ret_to	proc.c	/^void syscall_soft_ret_to(int pid,int return_val,int return_errno){$/;"	f
ticks	kernel.asm	/^ticks:$/;"	l
ticks_new	proc.c	/^static int ticks_new=0; $/;"	v	file:
time	tty.c	/^static void time(void){$/;"	f	file:
times	boot.asm	/^times 510-($-$$)-4 db 0$/;"	l
tmp	tty.c	/^char tmp[64];$/;"	v
true	usr/include/valType.h	5;"	d
tss	kernel.asm	/^tss:$/;"	l
tty	tty.c	/^void tty(void){$/;"	f
u16	usr/include/valType.h	/^typedef unsigned short u16;$/;"	t
u32	usr/include/valType.h	/^typedef unsigned int u32;$/;"	t
u8	usr/include/valType.h	/^typedef unsigned char u8;$/;"	t
u_obuffer_shift	usr/src/sys_call.asm	/^u_obuffer_shift: int80h 2$/;"	l
usro	makefile	/^usro= ..\/src\/usr\/lib\/asmtask.o ..\/src\/usr\/lib\/sys_call.o ..\/src\/usr\/lib\/utils.o\\$/;"	m
wake_hs	hs.c	/^void wake_hs(void){$/;"	f
width	disp.c	/^static int width=-1;$/;"	v	file:
widths	struinfo.c	/^int*widths=0;$/;"	v
workon	struinfo.c	/^void workon(char*p_stru,char**p_names,int*p_widths,int *p_lens,int members){$/;"	f
write_asciis_buffer	disp.c	/^void write_asciis_buffer(unsigned x,unsigned val_type){$/;"	f
write_cmd_asciis	tty.c	/^void write_cmd_asciis(unsigned ascii){$/;"	f
